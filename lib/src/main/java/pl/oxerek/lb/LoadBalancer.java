/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pl.oxerek.lb;

import java.util.Map;
import java.util.Random;

import static com.google.common.base.Preconditions.checkNotNull;

public class LoadBalancer {

    private final static int DEFAULT_LIMIT = 10;

    private final int instancesLimit;

    private final Map<String, Instance> instances;

    private final Random random;

    public LoadBalancer(Map<String, Instance> instances) {
        this(DEFAULT_LIMIT, instances);
    }

    public LoadBalancer(int instancesLimit, Map<String, Instance> instances) {
        this.instancesLimit = instancesLimit;
        this.instances = instances;
        this.random = new Random();
    }

    public boolean registerInstance(Instance instance) {

        checkNotNull(instance);

        if (instances.size() == instancesLimit) {
            throw new InstancesLimitExceeded("Instances limit reached.");
        }

        if (putIfUnique(instance)) {
            return true;
        }

        throw new NotUniqueInstanceException("Instance address already exists.", instance.address());
    }

    public Instance getInstance() {

        if (instances.size() == 0) {
            throw new NoRegisteredInstance("No registered instance.");
        }

        var index = random.nextInt(instances.size());
        var key = instances.keySet().stream().toList().get(index);

        return instances.get(key);
    }

    private synchronized boolean putIfUnique(Instance instance) {
        if (!instances.containsKey(instance.address())) {
            instances.put(instance.address(), instance);
            return true;
        }
        return false;
    }
}
